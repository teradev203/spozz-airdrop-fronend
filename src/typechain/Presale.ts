/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface PresaleInterface extends utils.Interface {
  functions: {
    "MIN_AMOUNT()": FunctionFragment;
    "addNewChain(uint256,address,address)": FunctionFragment;
    "changeActivationChain(uint256,bool)": FunctionFragment;
    "commissionReceiver()": FunctionFragment;
    "currentPhase()": FunctionFragment;
    "eventStore(bytes32)": FunctionFragment;
    "maxAmount()": FunctionFragment;
    "maxSwapEndInPhase()": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "registeredChains(uint256)": FunctionFragment;
    "rootToken()": FunctionFragment;
    "setCommission(uint256,address)": FunctionFragment;
    "setMaxAmount(uint256)": FunctionFragment;
    "setPhase(uint256)": FunctionFragment;
    "setSwapComplete(bytes32)": FunctionFragment;
    "swapCommission()": FunctionFragment;
    "swapEnd(bytes32,uint256,uint256,address,address,uint256)": FunctionFragment;
    "swapStart(uint256,address,uint256)": FunctionFragment;
    "totalSwapEnd()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "userEventMap(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "MIN_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addNewChain",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "changeActivationChain",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "commissionReceiver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentPhase",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "eventStore",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "maxAmount", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maxSwapEndInPhase",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registeredChains",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "rootToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setCommission",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPhase",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapComplete",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swapCommission",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapEnd",
    values: [
      BytesLike,
      BigNumberish,
      BigNumberish,
      string,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapStart",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSwapEnd",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "userEventMap",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "MIN_AMOUNT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addNewChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeActivationChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commissionReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentPhase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "eventStore", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxAmount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxSwapEndInPhase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registeredChains",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rootToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCommission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPhase", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setSwapComplete",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapCommission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapEnd", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swapStart", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSwapEnd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userEventMap",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "SwapCompleted(bytes32,uint256,address,address,uint256)": EventFragment;
    "SwapEnd(bytes32,uint256,uint256,address,address,uint256)": EventFragment;
    "SwapStart(bytes32,uint256,uint256,address,address,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapEnd"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapStart"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type PausedEvent = TypedEvent<[string], { account: string }>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export type SwapCompletedEvent = TypedEvent<
  [string, BigNumber, string, string, BigNumber],
  {
    eventHash: string;
    depositCount: BigNumber;
    fromAddr: string;
    toAddr: string;
    amount: BigNumber;
  }
>;

export type SwapCompletedEventFilter = TypedEventFilter<SwapCompletedEvent>;

export type SwapEndEvent = TypedEvent<
  [string, BigNumber, BigNumber, string, string, BigNumber],
  {
    eventHash: string;
    depositCount: BigNumber;
    fromChainID: BigNumber;
    fromAddr: string;
    toAddr: string;
    amount: BigNumber;
  }
>;

export type SwapEndEventFilter = TypedEventFilter<SwapEndEvent>;

export type SwapStartEvent = TypedEvent<
  [string, BigNumber, BigNumber, string, string, BigNumber],
  {
    eventHash: string;
    depositCount: BigNumber;
    toChainID: BigNumber;
    fromAddr: string;
    toAddr: string;
    amount: BigNumber;
  }
>;

export type SwapStartEventFilter = TypedEventFilter<SwapStartEvent>;

export type UnpausedEvent = TypedEvent<[string], { account: string }>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface Presale extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PresaleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MIN_AMOUNT(overrides?: CallOverrides): Promise<[BigNumber]>;

    addNewChain(
      chainID: BigNumberish,
      minter: string,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeActivationChain(
      chainID: BigNumberish,
      activate: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    commissionReceiver(overrides?: CallOverrides): Promise<[string]>;

    currentPhase(overrides?: CallOverrides): Promise<[BigNumber]>;

    eventStore(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, string, BigNumber, boolean] & {
        depositCount: BigNumber;
        chainID: BigNumber;
        from: string;
        to: string;
        amount: BigNumber;
        isCompleted: boolean;
      }
    >;

    maxAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxSwapEndInPhase(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    registeredChains(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, boolean, BigNumber] & {
        minter: string;
        token: string;
        active: boolean;
        depositCount: BigNumber;
      }
    >;

    rootToken(overrides?: CallOverrides): Promise<[string]>;

    setCommission(
      _swapCommission: BigNumberish,
      _commissionReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxAmount(
      _maxAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPhase(
      _newPhase: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSwapComplete(
      eventHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapCommission(overrides?: CallOverrides): Promise<[BigNumber]>;

    swapEnd(
      eventHash: BytesLike,
      depositCount: BigNumberish,
      fromChainID: BigNumberish,
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapStart(
      toChainID: BigNumberish,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalSwapEnd(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userEventMap(arg0: string, overrides?: CallOverrides): Promise<[string]>;
  };

  MIN_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

  addNewChain(
    chainID: BigNumberish,
    minter: string,
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeActivationChain(
    chainID: BigNumberish,
    activate: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  commissionReceiver(overrides?: CallOverrides): Promise<string>;

  currentPhase(overrides?: CallOverrides): Promise<BigNumber>;

  eventStore(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string, string, BigNumber, boolean] & {
      depositCount: BigNumber;
      chainID: BigNumber;
      from: string;
      to: string;
      amount: BigNumber;
      isCompleted: boolean;
    }
  >;

  maxAmount(overrides?: CallOverrides): Promise<BigNumber>;

  maxSwapEndInPhase(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  registeredChains(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, boolean, BigNumber] & {
      minter: string;
      token: string;
      active: boolean;
      depositCount: BigNumber;
    }
  >;

  rootToken(overrides?: CallOverrides): Promise<string>;

  setCommission(
    _swapCommission: BigNumberish,
    _commissionReceiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxAmount(
    _maxAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPhase(
    _newPhase: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSwapComplete(
    eventHash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapCommission(overrides?: CallOverrides): Promise<BigNumber>;

  swapEnd(
    eventHash: BytesLike,
    depositCount: BigNumberish,
    fromChainID: BigNumberish,
    from: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapStart(
    toChainID: BigNumberish,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalSwapEnd(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userEventMap(arg0: string, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    MIN_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    addNewChain(
      chainID: BigNumberish,
      minter: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    changeActivationChain(
      chainID: BigNumberish,
      activate: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    commissionReceiver(overrides?: CallOverrides): Promise<string>;

    currentPhase(overrides?: CallOverrides): Promise<BigNumber>;

    eventStore(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, string, BigNumber, boolean] & {
        depositCount: BigNumber;
        chainID: BigNumber;
        from: string;
        to: string;
        amount: BigNumber;
        isCompleted: boolean;
      }
    >;

    maxAmount(overrides?: CallOverrides): Promise<BigNumber>;

    maxSwapEndInPhase(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    registeredChains(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, boolean, BigNumber] & {
        minter: string;
        token: string;
        active: boolean;
        depositCount: BigNumber;
      }
    >;

    rootToken(overrides?: CallOverrides): Promise<string>;

    setCommission(
      _swapCommission: BigNumberish,
      _commissionReceiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxAmount(
      _maxAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPhase(
      _newPhase: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setSwapComplete(
      eventHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    swapCommission(overrides?: CallOverrides): Promise<BigNumber>;

    swapEnd(
      eventHash: BytesLike,
      depositCount: BigNumberish,
      fromChainID: BigNumberish,
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    swapStart(
      toChainID: BigNumberish,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    totalSwapEnd(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    userEventMap(arg0: string, overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "SwapCompleted(bytes32,uint256,address,address,uint256)"(
      eventHash?: BytesLike | null,
      depositCount?: null,
      fromAddr?: null,
      toAddr?: null,
      amount?: null
    ): SwapCompletedEventFilter;
    SwapCompleted(
      eventHash?: BytesLike | null,
      depositCount?: null,
      fromAddr?: null,
      toAddr?: null,
      amount?: null
    ): SwapCompletedEventFilter;

    "SwapEnd(bytes32,uint256,uint256,address,address,uint256)"(
      eventHash?: BytesLike | null,
      depositCount?: null,
      fromChainID?: BigNumberish | null,
      fromAddr?: string | null,
      toAddr?: null,
      amount?: null
    ): SwapEndEventFilter;
    SwapEnd(
      eventHash?: BytesLike | null,
      depositCount?: null,
      fromChainID?: BigNumberish | null,
      fromAddr?: string | null,
      toAddr?: null,
      amount?: null
    ): SwapEndEventFilter;

    "SwapStart(bytes32,uint256,uint256,address,address,uint256)"(
      eventHash?: BytesLike | null,
      depositCount?: null,
      toChainID?: BigNumberish | null,
      fromAddr?: string | null,
      toAddr?: null,
      amount?: null
    ): SwapStartEventFilter;
    SwapStart(
      eventHash?: BytesLike | null,
      depositCount?: null,
      toChainID?: BigNumberish | null,
      fromAddr?: string | null,
      toAddr?: null,
      amount?: null
    ): SwapStartEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    MIN_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    addNewChain(
      chainID: BigNumberish,
      minter: string,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeActivationChain(
      chainID: BigNumberish,
      activate: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    commissionReceiver(overrides?: CallOverrides): Promise<BigNumber>;

    currentPhase(overrides?: CallOverrides): Promise<BigNumber>;

    eventStore(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    maxAmount(overrides?: CallOverrides): Promise<BigNumber>;

    maxSwapEndInPhase(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    registeredChains(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rootToken(overrides?: CallOverrides): Promise<BigNumber>;

    setCommission(
      _swapCommission: BigNumberish,
      _commissionReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxAmount(
      _maxAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPhase(
      _newPhase: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSwapComplete(
      eventHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapCommission(overrides?: CallOverrides): Promise<BigNumber>;

    swapEnd(
      eventHash: BytesLike,
      depositCount: BigNumberish,
      fromChainID: BigNumberish,
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapStart(
      toChainID: BigNumberish,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalSwapEnd(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userEventMap(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    MIN_AMOUNT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addNewChain(
      chainID: BigNumberish,
      minter: string,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeActivationChain(
      chainID: BigNumberish,
      activate: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    commissionReceiver(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentPhase(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    eventStore(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxSwapEndInPhase(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registeredChains(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rootToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setCommission(
      _swapCommission: BigNumberish,
      _commissionReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxAmount(
      _maxAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPhase(
      _newPhase: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSwapComplete(
      eventHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapCommission(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swapEnd(
      eventHash: BytesLike,
      depositCount: BigNumberish,
      fromChainID: BigNumberish,
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapStart(
      toChainID: BigNumberish,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalSwapEnd(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userEventMap(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
