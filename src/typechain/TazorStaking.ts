/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface TazorStakingInterface extends utils.Interface {
  functions: {
    "DAI()": FunctionFragment;
    "authority()": FunctionFragment;
    "balanceOfTaz(address)": FunctionFragment;
    "balanceOfTazor(address)": FunctionFragment;
    "burnRate()": FunctionFragment;
    "calcBurn(address)": FunctionFragment;
    "calcReward(address)": FunctionFragment;
    "canClaim(address)": FunctionFragment;
    "emergencyRewardWithdraw(uint256)": FunctionFragment;
    "emergencyStakedWithdraw(uint256)": FunctionFragment;
    "exitTazor()": FunctionFragment;
    "getAPRvalue(address)": FunctionFragment;
    "getReward(address)": FunctionFragment;
    "getTazorAndTazRate()": FunctionFragment;
    "policy()": FunctionFragment;
    "pullManagement()": FunctionFragment;
    "pushManagement(address)": FunctionFragment;
    "renounceManagement()": FunctionFragment;
    "rewards(address)": FunctionFragment;
    "routerAddress()": FunctionFragment;
    "secondsToNextEpoch(address)": FunctionFragment;
    "setAuthority(address)": FunctionFragment;
    "setFeeWalletAddress(address)": FunctionFragment;
    "setTimeIntervalForTest(uint256)": FunctionFragment;
    "stakeTaz(uint256,address)": FunctionFragment;
    "stakeTazor(uint256,address)": FunctionFragment;
    "tazToken()": FunctionFragment;
    "tazorToken()": FunctionFragment;
    "timeIntervalForTest()": FunctionFragment;
    "totalTazSupply()": FunctionFragment;
    "totalTazorSupply()": FunctionFragment;
    "uniswapV2Router()": FunctionFragment;
    "unstakeTaz(uint256)": FunctionFragment;
    "unstakeTazor(uint256)": FunctionFragment;
    "updateRouterAddress(address)": FunctionFragment;
    "userInfos(address)": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "DAI", values?: undefined): string;
  encodeFunctionData(functionFragment: "authority", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "balanceOfTaz",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfTazor",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "burnRate", values?: undefined): string;
  encodeFunctionData(functionFragment: "calcBurn", values: [string]): string;
  encodeFunctionData(functionFragment: "calcReward", values: [string]): string;
  encodeFunctionData(functionFragment: "canClaim", values: [string]): string;
  encodeFunctionData(
    functionFragment: "emergencyRewardWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyStakedWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "exitTazor", values?: undefined): string;
  encodeFunctionData(functionFragment: "getAPRvalue", values: [string]): string;
  encodeFunctionData(functionFragment: "getReward", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getTazorAndTazRate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "policy", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pullManagement",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pushManagement",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceManagement",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rewards", values: [string]): string;
  encodeFunctionData(
    functionFragment: "routerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "secondsToNextEpoch",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setAuthority",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeWalletAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTimeIntervalForTest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeTaz",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeTazor",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "tazToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tazorToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "timeIntervalForTest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalTazSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalTazorSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV2Router",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unstakeTaz",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unstakeTazor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRouterAddress",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "userInfos", values: [string]): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(functionFragment: "DAI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "authority", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfTaz",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfTazor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burnRate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "calcBurn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "calcReward", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "canClaim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyRewardWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyStakedWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exitTazor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAPRvalue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getReward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTazorAndTazRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "policy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pullManagement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pushManagement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceManagement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "routerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "secondsToNextEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuthority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeWalletAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTimeIntervalForTest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stakeTaz", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakeTazor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tazToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tazorToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "timeIntervalForTest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalTazSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalTazorSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV2Router",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unstakeTaz", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unstakeTazor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRouterAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userInfos", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "AuthorityUpdated(address)": EventFragment;
    "OwnershipPulled(address,address)": EventFragment;
    "OwnershipPushed(address,address)": EventFragment;
    "Recovered(address,uint256)": EventFragment;
    "RewardAdded(uint256)": EventFragment;
    "RewardPaid(address,uint256)": EventFragment;
    "RewardsDurationUpdated(uint256)": EventFragment;
    "TazStaked(address,uint256)": EventFragment;
    "TazWithdrawn(address,uint256)": EventFragment;
    "TazorStaked(address,uint256)": EventFragment;
    "TazorWithdrawn(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuthorityUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipPulled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipPushed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Recovered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardPaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsDurationUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TazStaked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TazWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TazorStaked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TazorWithdrawn"): EventFragment;
}

export type AuthorityUpdatedEvent = TypedEvent<[string], { authority: string }>;

export type AuthorityUpdatedEventFilter =
  TypedEventFilter<AuthorityUpdatedEvent>;

export type OwnershipPulledEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipPulledEventFilter = TypedEventFilter<OwnershipPulledEvent>;

export type OwnershipPushedEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipPushedEventFilter = TypedEventFilter<OwnershipPushedEvent>;

export type RecoveredEvent = TypedEvent<
  [string, BigNumber],
  { token: string; amount: BigNumber }
>;

export type RecoveredEventFilter = TypedEventFilter<RecoveredEvent>;

export type RewardAddedEvent = TypedEvent<[BigNumber], { reward: BigNumber }>;

export type RewardAddedEventFilter = TypedEventFilter<RewardAddedEvent>;

export type RewardPaidEvent = TypedEvent<
  [string, BigNumber],
  { user: string; reward: BigNumber }
>;

export type RewardPaidEventFilter = TypedEventFilter<RewardPaidEvent>;

export type RewardsDurationUpdatedEvent = TypedEvent<
  [BigNumber],
  { newDuration: BigNumber }
>;

export type RewardsDurationUpdatedEventFilter =
  TypedEventFilter<RewardsDurationUpdatedEvent>;

export type TazStakedEvent = TypedEvent<
  [string, BigNumber],
  { user: string; amount: BigNumber }
>;

export type TazStakedEventFilter = TypedEventFilter<TazStakedEvent>;

export type TazWithdrawnEvent = TypedEvent<
  [string, BigNumber],
  { user: string; amount: BigNumber }
>;

export type TazWithdrawnEventFilter = TypedEventFilter<TazWithdrawnEvent>;

export type TazorStakedEvent = TypedEvent<
  [string, BigNumber],
  { user: string; amount: BigNumber }
>;

export type TazorStakedEventFilter = TypedEventFilter<TazorStakedEvent>;

export type TazorWithdrawnEvent = TypedEvent<
  [string, BigNumber],
  { user: string; amount: BigNumber }
>;

export type TazorWithdrawnEventFilter = TypedEventFilter<TazorWithdrawnEvent>;

export interface TazorStaking extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TazorStakingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DAI(overrides?: CallOverrides): Promise<[string]>;

    authority(overrides?: CallOverrides): Promise<[string]>;

    balanceOfTaz(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOfTazor(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    burnRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    calcBurn(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    calcReward(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    canClaim(_user: string, overrides?: CallOverrides): Promise<[boolean]>;

    emergencyRewardWithdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    emergencyStakedWithdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exitTazor(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAPRvalue(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getReward(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getTazorAndTazRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    policy(overrides?: CallOverrides): Promise<[string]>;

    pullManagement(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pushManagement(
      newOwner_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceManagement(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewards(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    routerAddress(overrides?: CallOverrides): Promise<[string]>;

    secondsToNextEpoch(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setAuthority(
      _newAuthority: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeWalletAddress(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTimeIntervalForTest(
      _timeIntervalForTest: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakeTaz(
      amount: BigNumberish,
      receipient: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakeTazor(
      amount: BigNumberish,
      receipient: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tazToken(overrides?: CallOverrides): Promise<[string]>;

    tazorToken(overrides?: CallOverrides): Promise<[string]>;

    timeIntervalForTest(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalTazSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalTazorSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    uniswapV2Router(overrides?: CallOverrides): Promise<[string]>;

    unstakeTaz(
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unstakeTazor(
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateRouterAddress(
      _routerAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userInfos(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        tazorNum: BigNumber;
        tazNum: BigNumber;
        reward: BigNumber;
        apr: BigNumber;
        lastUpdateTime: BigNumber;
        epochStartTime: BigNumber;
        burnAmount: BigNumber;
      }
    >;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DAI(overrides?: CallOverrides): Promise<string>;

  authority(overrides?: CallOverrides): Promise<string>;

  balanceOfTaz(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  balanceOfTazor(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  burnRate(overrides?: CallOverrides): Promise<BigNumber>;

  calcBurn(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  calcReward(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  canClaim(_user: string, overrides?: CallOverrides): Promise<boolean>;

  emergencyRewardWithdraw(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  emergencyStakedWithdraw(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exitTazor(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAPRvalue(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  getReward(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  getTazorAndTazRate(overrides?: CallOverrides): Promise<BigNumber>;

  policy(overrides?: CallOverrides): Promise<string>;

  pullManagement(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pushManagement(
    newOwner_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceManagement(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  routerAddress(overrides?: CallOverrides): Promise<string>;

  secondsToNextEpoch(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setAuthority(
    _newAuthority: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeWalletAddress(
    _addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTimeIntervalForTest(
    _timeIntervalForTest: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakeTaz(
    amount: BigNumberish,
    receipient: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakeTazor(
    amount: BigNumberish,
    receipient: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tazToken(overrides?: CallOverrides): Promise<string>;

  tazorToken(overrides?: CallOverrides): Promise<string>;

  timeIntervalForTest(overrides?: CallOverrides): Promise<BigNumber>;

  totalTazSupply(overrides?: CallOverrides): Promise<BigNumber>;

  totalTazorSupply(overrides?: CallOverrides): Promise<BigNumber>;

  uniswapV2Router(overrides?: CallOverrides): Promise<string>;

  unstakeTaz(
    amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unstakeTazor(
    amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateRouterAddress(
    _routerAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userInfos(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      tazorNum: BigNumber;
      tazNum: BigNumber;
      reward: BigNumber;
      apr: BigNumber;
      lastUpdateTime: BigNumber;
      epochStartTime: BigNumber;
      burnAmount: BigNumber;
    }
  >;

  withdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DAI(overrides?: CallOverrides): Promise<string>;

    authority(overrides?: CallOverrides): Promise<string>;

    balanceOfTaz(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfTazor(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burnRate(overrides?: CallOverrides): Promise<BigNumber>;

    calcBurn(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    calcReward(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    canClaim(_user: string, overrides?: CallOverrides): Promise<boolean>;

    emergencyRewardWithdraw(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyStakedWithdraw(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    exitTazor(overrides?: CallOverrides): Promise<void>;

    getAPRvalue(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    getReward(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    getTazorAndTazRate(overrides?: CallOverrides): Promise<BigNumber>;

    policy(overrides?: CallOverrides): Promise<string>;

    pullManagement(overrides?: CallOverrides): Promise<void>;

    pushManagement(newOwner_: string, overrides?: CallOverrides): Promise<void>;

    renounceManagement(overrides?: CallOverrides): Promise<void>;

    rewards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    routerAddress(overrides?: CallOverrides): Promise<string>;

    secondsToNextEpoch(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAuthority(
      _newAuthority: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeWalletAddress(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTimeIntervalForTest(
      _timeIntervalForTest: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeTaz(
      amount: BigNumberish,
      receipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeTazor(
      amount: BigNumberish,
      receipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    tazToken(overrides?: CallOverrides): Promise<string>;

    tazorToken(overrides?: CallOverrides): Promise<string>;

    timeIntervalForTest(overrides?: CallOverrides): Promise<BigNumber>;

    totalTazSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalTazorSupply(overrides?: CallOverrides): Promise<BigNumber>;

    uniswapV2Router(overrides?: CallOverrides): Promise<string>;

    unstakeTaz(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    unstakeTazor(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRouterAddress(
      _routerAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    userInfos(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        tazorNum: BigNumber;
        tazNum: BigNumber;
        reward: BigNumber;
        apr: BigNumber;
        lastUpdateTime: BigNumber;
        epochStartTime: BigNumber;
        burnAmount: BigNumber;
      }
    >;

    withdraw(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AuthorityUpdated(address)"(
      authority?: string | null
    ): AuthorityUpdatedEventFilter;
    AuthorityUpdated(authority?: string | null): AuthorityUpdatedEventFilter;

    "OwnershipPulled(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipPulledEventFilter;
    OwnershipPulled(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipPulledEventFilter;

    "OwnershipPushed(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipPushedEventFilter;
    OwnershipPushed(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipPushedEventFilter;

    "Recovered(address,uint256)"(
      token?: null,
      amount?: null
    ): RecoveredEventFilter;
    Recovered(token?: null, amount?: null): RecoveredEventFilter;

    "RewardAdded(uint256)"(reward?: null): RewardAddedEventFilter;
    RewardAdded(reward?: null): RewardAddedEventFilter;

    "RewardPaid(address,uint256)"(
      user?: string | null,
      reward?: null
    ): RewardPaidEventFilter;
    RewardPaid(user?: string | null, reward?: null): RewardPaidEventFilter;

    "RewardsDurationUpdated(uint256)"(
      newDuration?: null
    ): RewardsDurationUpdatedEventFilter;
    RewardsDurationUpdated(
      newDuration?: null
    ): RewardsDurationUpdatedEventFilter;

    "TazStaked(address,uint256)"(
      user?: string | null,
      amount?: null
    ): TazStakedEventFilter;
    TazStaked(user?: string | null, amount?: null): TazStakedEventFilter;

    "TazWithdrawn(address,uint256)"(
      user?: string | null,
      amount?: null
    ): TazWithdrawnEventFilter;
    TazWithdrawn(user?: string | null, amount?: null): TazWithdrawnEventFilter;

    "TazorStaked(address,uint256)"(
      user?: string | null,
      amount?: null
    ): TazorStakedEventFilter;
    TazorStaked(user?: string | null, amount?: null): TazorStakedEventFilter;

    "TazorWithdrawn(address,uint256)"(
      user?: string | null,
      amount?: null
    ): TazorWithdrawnEventFilter;
    TazorWithdrawn(
      user?: string | null,
      amount?: null
    ): TazorWithdrawnEventFilter;
  };

  estimateGas: {
    DAI(overrides?: CallOverrides): Promise<BigNumber>;

    authority(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfTaz(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfTazor(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burnRate(overrides?: CallOverrides): Promise<BigNumber>;

    calcBurn(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    calcReward(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    canClaim(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    emergencyRewardWithdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    emergencyStakedWithdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exitTazor(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAPRvalue(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    getReward(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    getTazorAndTazRate(overrides?: CallOverrides): Promise<BigNumber>;

    policy(overrides?: CallOverrides): Promise<BigNumber>;

    pullManagement(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pushManagement(
      newOwner_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceManagement(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    routerAddress(overrides?: CallOverrides): Promise<BigNumber>;

    secondsToNextEpoch(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAuthority(
      _newAuthority: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeWalletAddress(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTimeIntervalForTest(
      _timeIntervalForTest: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakeTaz(
      amount: BigNumberish,
      receipient: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakeTazor(
      amount: BigNumberish,
      receipient: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tazToken(overrides?: CallOverrides): Promise<BigNumber>;

    tazorToken(overrides?: CallOverrides): Promise<BigNumber>;

    timeIntervalForTest(overrides?: CallOverrides): Promise<BigNumber>;

    totalTazSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalTazorSupply(overrides?: CallOverrides): Promise<BigNumber>;

    uniswapV2Router(overrides?: CallOverrides): Promise<BigNumber>;

    unstakeTaz(
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unstakeTazor(
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateRouterAddress(
      _routerAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userInfos(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DAI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    authority(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOfTaz(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfTazor(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burnRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calcBurn(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcReward(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canClaim(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    emergencyRewardWithdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    emergencyStakedWithdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exitTazor(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAPRvalue(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReward(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTazorAndTazRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    policy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pullManagement(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pushManagement(
      newOwner_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceManagement(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewards(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    routerAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    secondsToNextEpoch(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAuthority(
      _newAuthority: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeWalletAddress(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTimeIntervalForTest(
      _timeIntervalForTest: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakeTaz(
      amount: BigNumberish,
      receipient: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakeTazor(
      amount: BigNumberish,
      receipient: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tazToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tazorToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timeIntervalForTest(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalTazSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalTazorSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uniswapV2Router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unstakeTaz(
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unstakeTazor(
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateRouterAddress(
      _routerAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userInfos(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
