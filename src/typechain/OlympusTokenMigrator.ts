/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface OlympusTokenMigratorInterface extends utils.Interface {
  functions: {
    "authority()": FunctionFragment;
    "bridgeBack(uint256,uint8)": FunctionFragment;
    "defund(address)": FunctionFragment;
    "gOHM()": FunctionFragment;
    "migrate(uint256,uint8,uint8)": FunctionFragment;
    "migrateAll(uint8)": FunctionFragment;
    "migrateContracts(address,address,address,address,address)": FunctionFragment;
    "migrateLP(address,bool,address,uint256,uint256)": FunctionFragment;
    "migrateToken(address)": FunctionFragment;
    "newOHM()": FunctionFragment;
    "newStaking()": FunctionFragment;
    "newTreasury()": FunctionFragment;
    "ohmMigrated()": FunctionFragment;
    "oldOHM()": FunctionFragment;
    "oldStaking()": FunctionFragment;
    "oldSupply()": FunctionFragment;
    "oldTreasury()": FunctionFragment;
    "oldsOHM()": FunctionFragment;
    "oldwsOHM()": FunctionFragment;
    "setAuthority(address)": FunctionFragment;
    "setgOHM(address)": FunctionFragment;
    "startTimelock()": FunctionFragment;
    "sushiRouter()": FunctionFragment;
    "timelockEnd()": FunctionFragment;
    "timelockLength()": FunctionFragment;
    "uniRouter()": FunctionFragment;
    "withdrawToken(address,uint256,address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "authority", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "bridgeBack",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "defund", values: [string]): string;
  encodeFunctionData(functionFragment: "gOHM", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "migrate",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "migrateAll",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "migrateContracts",
    values: [string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "migrateLP",
    values: [string, boolean, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "migrateToken",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "newOHM", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "newStaking",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "newTreasury",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ohmMigrated",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "oldOHM", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "oldStaking",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "oldSupply", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "oldTreasury",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "oldsOHM", values?: undefined): string;
  encodeFunctionData(functionFragment: "oldwsOHM", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setAuthority",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setgOHM", values: [string]): string;
  encodeFunctionData(
    functionFragment: "startTimelock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sushiRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "timelockEnd",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "timelockLength",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "uniRouter", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [string, BigNumberish, string]
  ): string;

  decodeFunctionResult(functionFragment: "authority", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bridgeBack", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "defund", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gOHM", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "migrate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "migrateAll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "migrateContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "migrateLP", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "migrateToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "newOHM", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "newStaking", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "newTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ohmMigrated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oldOHM", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oldStaking", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oldSupply", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "oldTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oldsOHM", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oldwsOHM", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAuthority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setgOHM", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "startTimelock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sushiRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timelockEnd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timelockLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uniRouter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;

  events: {
    "AuthorityUpdated(address)": EventFragment;
    "Defunded(uint256)": EventFragment;
    "Funded(uint256)": EventFragment;
    "Migrated(address,address)": EventFragment;
    "TimelockStarted(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuthorityUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Defunded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Funded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Migrated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TimelockStarted"): EventFragment;
}

export type AuthorityUpdatedEvent = TypedEvent<[string], { authority: string }>;

export type AuthorityUpdatedEventFilter =
  TypedEventFilter<AuthorityUpdatedEvent>;

export type DefundedEvent = TypedEvent<[BigNumber], { amount: BigNumber }>;

export type DefundedEventFilter = TypedEventFilter<DefundedEvent>;

export type FundedEvent = TypedEvent<[BigNumber], { amount: BigNumber }>;

export type FundedEventFilter = TypedEventFilter<FundedEvent>;

export type MigratedEvent = TypedEvent<
  [string, string],
  { staking: string; treasury: string }
>;

export type MigratedEventFilter = TypedEventFilter<MigratedEvent>;

export type TimelockStartedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { block: BigNumber; end: BigNumber }
>;

export type TimelockStartedEventFilter = TypedEventFilter<TimelockStartedEvent>;

export interface OlympusTokenMigrator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OlympusTokenMigratorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    authority(overrides?: CallOverrides): Promise<[string]>;

    bridgeBack(
      _amount: BigNumberish,
      _to: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    defund(
      reserve: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    gOHM(overrides?: CallOverrides): Promise<[string]>;

    migrate(
      _amount: BigNumberish,
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    migrateAll(
      _to: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    migrateContracts(
      _newTreasury: string,
      _newStaking: string,
      _newOHM: string,
      _newsOHM: string,
      _reserve: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    migrateLP(
      pair: string,
      sushi: boolean,
      token: string,
      _minA: BigNumberish,
      _minB: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    migrateToken(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    newOHM(overrides?: CallOverrides): Promise<[string]>;

    newStaking(overrides?: CallOverrides): Promise<[string]>;

    newTreasury(overrides?: CallOverrides): Promise<[string]>;

    ohmMigrated(overrides?: CallOverrides): Promise<[boolean]>;

    oldOHM(overrides?: CallOverrides): Promise<[string]>;

    oldStaking(overrides?: CallOverrides): Promise<[string]>;

    oldSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    oldTreasury(overrides?: CallOverrides): Promise<[string]>;

    oldsOHM(overrides?: CallOverrides): Promise<[string]>;

    oldwsOHM(overrides?: CallOverrides): Promise<[string]>;

    setAuthority(
      _newAuthority: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setgOHM(
      _gOHM: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startTimelock(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sushiRouter(overrides?: CallOverrides): Promise<[string]>;

    timelockEnd(overrides?: CallOverrides): Promise<[BigNumber]>;

    timelockLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    uniRouter(overrides?: CallOverrides): Promise<[string]>;

    withdrawToken(
      tokenAddress: string,
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  authority(overrides?: CallOverrides): Promise<string>;

  bridgeBack(
    _amount: BigNumberish,
    _to: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  defund(
    reserve: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  gOHM(overrides?: CallOverrides): Promise<string>;

  migrate(
    _amount: BigNumberish,
    _from: BigNumberish,
    _to: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  migrateAll(
    _to: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  migrateContracts(
    _newTreasury: string,
    _newStaking: string,
    _newOHM: string,
    _newsOHM: string,
    _reserve: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  migrateLP(
    pair: string,
    sushi: boolean,
    token: string,
    _minA: BigNumberish,
    _minB: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  migrateToken(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  newOHM(overrides?: CallOverrides): Promise<string>;

  newStaking(overrides?: CallOverrides): Promise<string>;

  newTreasury(overrides?: CallOverrides): Promise<string>;

  ohmMigrated(overrides?: CallOverrides): Promise<boolean>;

  oldOHM(overrides?: CallOverrides): Promise<string>;

  oldStaking(overrides?: CallOverrides): Promise<string>;

  oldSupply(overrides?: CallOverrides): Promise<BigNumber>;

  oldTreasury(overrides?: CallOverrides): Promise<string>;

  oldsOHM(overrides?: CallOverrides): Promise<string>;

  oldwsOHM(overrides?: CallOverrides): Promise<string>;

  setAuthority(
    _newAuthority: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setgOHM(
    _gOHM: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startTimelock(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sushiRouter(overrides?: CallOverrides): Promise<string>;

  timelockEnd(overrides?: CallOverrides): Promise<BigNumber>;

  timelockLength(overrides?: CallOverrides): Promise<BigNumber>;

  uniRouter(overrides?: CallOverrides): Promise<string>;

  withdrawToken(
    tokenAddress: string,
    amount: BigNumberish,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    authority(overrides?: CallOverrides): Promise<string>;

    bridgeBack(
      _amount: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    defund(reserve: string, overrides?: CallOverrides): Promise<void>;

    gOHM(overrides?: CallOverrides): Promise<string>;

    migrate(
      _amount: BigNumberish,
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    migrateAll(_to: BigNumberish, overrides?: CallOverrides): Promise<void>;

    migrateContracts(
      _newTreasury: string,
      _newStaking: string,
      _newOHM: string,
      _newsOHM: string,
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<void>;

    migrateLP(
      pair: string,
      sushi: boolean,
      token: string,
      _minA: BigNumberish,
      _minB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    migrateToken(token: string, overrides?: CallOverrides): Promise<void>;

    newOHM(overrides?: CallOverrides): Promise<string>;

    newStaking(overrides?: CallOverrides): Promise<string>;

    newTreasury(overrides?: CallOverrides): Promise<string>;

    ohmMigrated(overrides?: CallOverrides): Promise<boolean>;

    oldOHM(overrides?: CallOverrides): Promise<string>;

    oldStaking(overrides?: CallOverrides): Promise<string>;

    oldSupply(overrides?: CallOverrides): Promise<BigNumber>;

    oldTreasury(overrides?: CallOverrides): Promise<string>;

    oldsOHM(overrides?: CallOverrides): Promise<string>;

    oldwsOHM(overrides?: CallOverrides): Promise<string>;

    setAuthority(
      _newAuthority: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setgOHM(_gOHM: string, overrides?: CallOverrides): Promise<void>;

    startTimelock(overrides?: CallOverrides): Promise<void>;

    sushiRouter(overrides?: CallOverrides): Promise<string>;

    timelockEnd(overrides?: CallOverrides): Promise<BigNumber>;

    timelockLength(overrides?: CallOverrides): Promise<BigNumber>;

    uniRouter(overrides?: CallOverrides): Promise<string>;

    withdrawToken(
      tokenAddress: string,
      amount: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AuthorityUpdated(address)"(
      authority?: string | null
    ): AuthorityUpdatedEventFilter;
    AuthorityUpdated(authority?: string | null): AuthorityUpdatedEventFilter;

    "Defunded(uint256)"(amount?: null): DefundedEventFilter;
    Defunded(amount?: null): DefundedEventFilter;

    "Funded(uint256)"(amount?: null): FundedEventFilter;
    Funded(amount?: null): FundedEventFilter;

    "Migrated(address,address)"(
      staking?: null,
      treasury?: null
    ): MigratedEventFilter;
    Migrated(staking?: null, treasury?: null): MigratedEventFilter;

    "TimelockStarted(uint256,uint256)"(
      block?: null,
      end?: null
    ): TimelockStartedEventFilter;
    TimelockStarted(block?: null, end?: null): TimelockStartedEventFilter;
  };

  estimateGas: {
    authority(overrides?: CallOverrides): Promise<BigNumber>;

    bridgeBack(
      _amount: BigNumberish,
      _to: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    defund(
      reserve: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    gOHM(overrides?: CallOverrides): Promise<BigNumber>;

    migrate(
      _amount: BigNumberish,
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    migrateAll(
      _to: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    migrateContracts(
      _newTreasury: string,
      _newStaking: string,
      _newOHM: string,
      _newsOHM: string,
      _reserve: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    migrateLP(
      pair: string,
      sushi: boolean,
      token: string,
      _minA: BigNumberish,
      _minB: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    migrateToken(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    newOHM(overrides?: CallOverrides): Promise<BigNumber>;

    newStaking(overrides?: CallOverrides): Promise<BigNumber>;

    newTreasury(overrides?: CallOverrides): Promise<BigNumber>;

    ohmMigrated(overrides?: CallOverrides): Promise<BigNumber>;

    oldOHM(overrides?: CallOverrides): Promise<BigNumber>;

    oldStaking(overrides?: CallOverrides): Promise<BigNumber>;

    oldSupply(overrides?: CallOverrides): Promise<BigNumber>;

    oldTreasury(overrides?: CallOverrides): Promise<BigNumber>;

    oldsOHM(overrides?: CallOverrides): Promise<BigNumber>;

    oldwsOHM(overrides?: CallOverrides): Promise<BigNumber>;

    setAuthority(
      _newAuthority: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setgOHM(
      _gOHM: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startTimelock(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sushiRouter(overrides?: CallOverrides): Promise<BigNumber>;

    timelockEnd(overrides?: CallOverrides): Promise<BigNumber>;

    timelockLength(overrides?: CallOverrides): Promise<BigNumber>;

    uniRouter(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawToken(
      tokenAddress: string,
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    authority(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bridgeBack(
      _amount: BigNumberish,
      _to: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    defund(
      reserve: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    gOHM(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    migrate(
      _amount: BigNumberish,
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    migrateAll(
      _to: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    migrateContracts(
      _newTreasury: string,
      _newStaking: string,
      _newOHM: string,
      _newsOHM: string,
      _reserve: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    migrateLP(
      pair: string,
      sushi: boolean,
      token: string,
      _minA: BigNumberish,
      _minB: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    migrateToken(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    newOHM(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    newStaking(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    newTreasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ohmMigrated(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oldOHM(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oldStaking(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oldSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oldTreasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oldsOHM(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oldwsOHM(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAuthority(
      _newAuthority: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setgOHM(
      _gOHM: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startTimelock(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sushiRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timelockEnd(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timelockLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uniRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawToken(
      tokenAddress: string,
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
